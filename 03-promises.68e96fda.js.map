{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,KAAMJ,SAASC,cAAc,UA2B/B,SAASI,EAAcC,EAAUP,EAAOG,GACtC,MAAMK,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEL,E,MAAUP,IAGpBa,EAAO,C,SAAEN,E,MAAUP,GAAQ,GAE5BA,GACHe,aAAY,KACNP,EAEFI,EAAQ,C,SAAEL,E,MAAUP,IAGpBa,EAAO,C,SAAEN,E,MAAUP,GAAQ,GAE5BA,EAAQG,EAAK,G,CA7CpBJ,EAAKM,KAAKW,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAEC,iBAEF,MAAMC,EAAQC,OAAOrB,EAAKC,MAAMqB,OAC1BlB,EAAOiB,OAAOrB,EAAKI,KAAKkB,OACxBjB,EAASgB,OAAOrB,EAAKK,OAAOiB,OAElC,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAQkB,GAAK,EAC/BhB,EAAcgB,EAAI,EAAGH,EAAQhB,EAAOmB,EAAGnB,GACpCoB,MAAK,EAAChB,SAAEA,EAAQP,MAAEA,MACjBwB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBnB,QAAiBP,MAAU,IAGnD2B,OAAM,EAACpB,SAAEA,EAAQP,MAAEA,MAClBwB,EAAA3B,GAAS4B,OAAOG,QACd,sBAAoBrB,QAAeP,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const delay = Number(refs.delay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i + 1, delay + step * i, step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay, step) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n    setInterval(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay + step);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","delay","document","querySelector","step","amount","form","$47d4ff9957288465$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","setInterval","addEventListener","e","preventDefault","delay1","Number","value","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.68e96fda.js.map"}